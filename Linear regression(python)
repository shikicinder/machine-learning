import csv

with open('F:\csvhousing.csv') as csvfile:
    reader = csv.reader(csvfile)
    Xmatrix = [[0 for p in range(13)] for q in range(400)]  # p->col, q->row
    Ymatrix = [0 for p in range(400)]
    j = 0
    for t, row in enumerate(reader):                        # put cvs data into array
        if t < 400:
            for i in range(13):
                Xmatrix[j][i] = float(row[i])
                Ymatrix[j] = float(row[13])
            j += 1
        else:
            break  #

    deviation = 0.1                      #error
    rate = 0.000001                   #learning rate
    diff = 0
    error1 = 0
    error0 = 0
    count = 0                          #counting loop times
    theta = [0 for p in range(13)]

    while True:
         count += 1
         for n in range(400):
            diff1 = 0
            for i in range(1,13):
                diff1 += theta[i] * Xmatrix[n][i]
            diff = (theta[0] + diff1) - Ymatrix[n]            #gradient
            for i in range(13):
                theta[i] -= rate * diff * Xmatrix[n][i]          #get new theta

         error1 = 0
         for lp in range(400):
             error11 = 0
             for i in range(1,13):
                 error11 += theta[i] * Xmatrix[lp][i]
             error1 += (Ymatrix[lp] - (theta[0] + error11)) ** 2 / 2           # lose function
         if deviation > abs(error1 - error0):        #if lose change less than deviation, we get a satisfied result
            break
         else:
             error0 = error1
         print('theta0 : %f, theta1 : %f, theta2 : %f theta3 : %f theta4 : %f theta5 : %f theta6 : %f theta7 : %f theta8 : %f theta9 : %f theta10 : %f theta11 : %f theta12 : %f, error1 : %f' % (theta[0],theta[1],theta[2],theta[3],theta[4],theta[5],theta[6],theta[7],theta[8],theta[9],theta[10],theta[11],theta[12], error1))
    print('Done: theta0 : %f, theta1 : %f, theta2 : %f theta3 : %f theta4 : %f theta5 : %f theta6 : %f theta7 : %f theta8 : %f theta9 : %f theta10 : %f theta11 : %f theta12 : %f, error1 : %f' % (theta[0],theta[1],theta[2],theta[3],theta[4],theta[5],theta[6],theta[7],theta[8],theta[9],theta[10],theta[11],theta[12], error1))
    print('Iteration count: %d' % count)
    
    plt.figure(figsize=(10,10))                     
    predict = [0 for p in range(100)]
    for i in range(100):
        z = 0
        for j in range(1,13):
            z += theta[j]*Xmatrix[i][j]
            predict[i] = theta[0]+z           
    x = np.linspace(1,100,100)
    y1 = sorted(predict)  
    plt.scatter(x,y1,marker = 'x')           #draw the predictive result
    list = np.argsort(predict)           
    y2 = [0 for p in range(100)]
    for i in range(100):
        y2[i] = Ymatrix[list[i]]            
    plt.scatter(x,y2,marker = 'x')          #draw the labels
    plt.show()
